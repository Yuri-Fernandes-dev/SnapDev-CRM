# Generated by Django 4.2.20 on 2025-04-13 17:27

from django.db import migrations

def associate_company_data(apps, schema_editor):
    Company = apps.get_model('core', 'Company')
    Customer = apps.get_model('customers', 'Customer')
    LoyaltyTier = apps.get_model('customers', 'LoyaltyTier')
    Product = apps.get_model('products', 'Product')
    Category = apps.get_model('products', 'Category')
    PaymentMethod = apps.get_model('sales', 'PaymentMethod')
    Sale = apps.get_model('sales', 'Sale')
    
    # Get the first company (or create one if none exists)
    company = Company.objects.first()
    if not company:
        return  # If no company exists, there's no data to migrate
    
    # Associate all existing records with the company
    for customer in Customer.objects.filter(company__isnull=True):
        # Clear phone if it's a duplicate
        if Customer.objects.filter(company=company, phone=customer.phone).exists():
            customer.phone = None
        customer.company = company
        customer.save()
    
    LoyaltyTier.objects.filter(company__isnull=True).update(company=company)
    
    # Handle products and categories
    for category in Category.objects.filter(company__isnull=True):
        if Category.objects.filter(company=company, name=category.name).exists():
            category.name = f"{category.name} (2)"
        category.company = company
        category.save()
    
    for product in Product.objects.filter(company__isnull=True):
        if Product.objects.filter(company=company, code=product.code).exists():
            product.code = None
        if Product.objects.filter(company=company, barcode=product.barcode).exists():
            product.barcode = None
        product.company = company
        product.save()
    
    # Handle payment methods
    for payment_method in PaymentMethod.objects.filter(company__isnull=True):
        if PaymentMethod.objects.filter(company=company, name=payment_method.name).exists():
            payment_method.name = f"{payment_method.name} (2)"
        payment_method.company = company
        payment_method.save()
    
    Sale.objects.filter(company__isnull=True).update(company=company)

def reverse_company_data(apps, schema_editor):
    # No need to reverse since we're adding required data
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0004_customer_company_loyaltytier_company_and_more'),
        ('products', '0003_category_company_product_company_and_more'),
        ('sales', '0005_paymentmethod_company_and_more'),
    ]

    operations = [
        migrations.RunPython(associate_company_data, reverse_company_data),
    ]
